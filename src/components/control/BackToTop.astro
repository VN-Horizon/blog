---
import { Icon } from "astro-icon/components";
---

<!-- There can't be a filter on parent element, or it will break `fixed` -->
<div class="back-to-top-wrapper hidden lg:block">
    <div id="back-to-top-btn" class="back-to-top-btn hide flex items-center rounded-2xl overflow-hidden transition" onclick="backToTop()">
        <button aria-label="Back to Top" class="btn-card h-[3.75rem] w-[3.75rem]">
            <Icon name="material-symbols:keyboard-arrow-up-rounded" class="mx-auto"></Icon>
        </button>
    </div>
    
    <!-- Sidebar Toggle Button -->
    <div id="sidebar-toggle-btn" class="sidebar-toggle-btn flex items-center rounded-2xl overflow-hidden transition" onclick="toggleSidebar()">
        <button aria-label="Toggle Sidebar" class="btn-card h-[3.75rem] w-[3.75rem]">
            <Icon id="sidebar-toggle-icon" name="material-symbols:menu" class="mx-auto"></Icon>
        </button>
    </div>
</div>

<style lang="stylus">
.back-to-top-wrapper
    width: 3.75rem
    height: 3.75rem
    position: absolute
    right: 0
    top: 0
    pointer-events: none

.back-to-top-btn
    color: var(--primary)
    font-size: 2.25rem
    font-weight: bold
    border: none
    position: fixed
    bottom: 10rem
    opacity: 1
    cursor: pointer
    transform: translateX(5rem)
    pointer-events: auto
    i
        font-size: 1.75rem
    &.hide
        transform: translateX(5rem) scale(0.9)
        opacity: 0
        pointer-events: none
    &:active
      transform: translateX(5rem) scale(0.9)

.sidebar-toggle-btn
    color: var(--primary)
    font-size: 2.25rem
    font-weight: bold
    border: none
    position: fixed
    bottom: 6rem
    opacity: 1
    cursor: pointer
    transform: translateX(5rem)
    pointer-events: auto
    i
        font-size: 1.75rem
    &.hide
        transform: translateX(5rem) scale(0.9)
        opacity: 0
        pointer-events: none
    &:active
      transform: translateX(5rem) scale(0.9)

</style>

<script is:raw is:inline>
function backToTop() {
    window.scroll({ top: 0, behavior: 'smooth' });
}

// Sidebar toggle functionality
let sidebarVisible = true;

// Load saved state from localStorage
const savedState = localStorage.getItem('sidebar-visible');
if (savedState !== null) {
    sidebarVisible = savedState === 'true';
}

function toggleSidebar() {
    sidebarVisible = !sidebarVisible;
    updateSidebarState(sidebarVisible);
    localStorage.setItem('sidebar-visible', sidebarVisible.toString());
}

function updateSidebarState(visible) {
    const sidebarContent = document.getElementById('sidebar-content');
    const toggleIcon = document.getElementById('sidebar-toggle-icon');
    const mainGrid = document.getElementById('main-grid');
    const sidebar = document.getElementById('sidebar');
    console.log(sidebarContent, toggleIcon, mainGrid, sidebar);
    
    if (!sidebarContent || !toggleIcon || !mainGrid || !sidebar) return;
    
    if (visible) {
        // Show sidebar
        sidebarContent.style.opacity = '1';
        sidebarContent.style.transform = 'translateX(0)';
        sidebarContent.style.pointerEvents = 'auto';
        if(window.innerWidth > 1024) {
            sidebar.style.width = '17.5rem';
            sidebar.style.minWidth = '17.5rem';
        } else {
            sidebar.style.width = '100%';
            sidebar.style.minWidth = '100%';
        }
        mainGrid.style.gridTemplateColumns = '17.5rem auto';
        mainGrid.style.gap = '1rem';
        
        // Update toggle button icon
        toggleIcon.setAttribute('name', 'material-symbols:menu');
    } else {
        // Hide sidebar
        sidebarContent.style.opacity = '0';
        sidebarContent.style.transform = 'translateX(-100%)';
        sidebarContent.style.pointerEvents = 'none';
        mainGrid.style.gridTemplateColumns = '0 auto';
        mainGrid.style.gap = '0';
        
        // Update toggle button icon
        toggleIcon.setAttribute('name', 'material-symbols:menu-open');
    }
}

// Initialize sidebar state when DOM is ready
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        updateSidebarState(sidebarVisible);
    });
} else {
    updateSidebarState(sidebarVisible);
}
</script>
